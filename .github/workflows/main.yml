name: macOS Build

on:
  repository_dispatch:
    # 分支为feature/dev和master时触发
    branches:
      - feature/dev
      - master
    types: [bitbucket_push]

jobs:
  build:
    runs-on: macos-latest 

    steps:
    - name: Checkout Bitbucket repository
      run: |
        git clone ${{ secrets.BITBUCKET_URL }} bitbucket-repo
        
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.BITBUCKET_SSH_KEY }}
    - name: Add Bitbucket to known hosts
      run: ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts

    
    - uses: subosito/flutter-action@v2
      name: 安装FLUTTER环境
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
    - name: 安装依赖
      run: |
        # 安装rust
        curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y

        # 安装rinf
        cargo install rinf

        # 构建 Protobuf 消息
        rinf message

        # 确定输出目录
        cd bitbucket-repo && dart run build_runner build --define "platform_builder:platform_builder=platform=macos" && flutter clean && flutter pub get && cd macos/ && pod install        
      
    - uses: apple-actions/import-codesign-certs@v1
      name: 安装APP证书
      with:
        p12-file-base64: ${{ secrets.APP_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
    
    - run : |
        security find-identity -v

    - name: Build project
      run: |
        echo "Building project..."
        cd bitbucket-repo
        mkdir -p dist

        flutter build macos --release --no-tree-shake-icons

        # 确定输出目录
        PROJECT_DIR=$(pwd)
        OUTPUT_DIR="$PROJECT_DIR/build/macos/Build/Products/Release"

        # 创建临时目录
        DMG_DIR="$OUTPUT_DIR/dmg_temp"
        if [[ -d "$DMG_DIR" ]]; then
            rm -rf "${DMG_DIR:?}/"*
        else
            mkdir -p "$DMG_DIR"
        fi

        # 获取应用程序名称
        APP_NAME=$(echo "$OUTPUT_DIR"/*.app | awk -F 'Release/' '{print $2}' | awk -F .app '{print $1}')

        # 获取当前时间
        # CURRENT_TIME=$(date "+%Y%m%d_%H%M")
        CURRENT_TIME=$(date +%s)

        # 确定DMG名称
        DMG_NAME="${APP_NAME}_${CURRENT_TIME}.dmg"
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV

        # 应用签名
        codesign -f -o runtime -s "${{secrets.IDENTITY_NAME}}" -v "${OUTPUT_DIR}/${APP_NAME}.app" --deep

        # 生成钥匙串密码凭证
        xcrun notarytool store-credentials 'pictorial' --apple-id "${{secrets.USER_NAME}}" --team-id "${{secrets.TEAM_ID}}" --password "${{secrets.ACCOUNT_PASSWORD}}"

        # 将应用程序复制到临时目录
        cp -R "$OUTPUT_DIR/$APP_NAME.app" "$DMG_DIR" || exit 1

        # 确定DMG路径
        DMG_PATH="$OUTPUT_DIR/$DMG_NAME"

        # 输出DMG路径
        echo ">>>>>> DMG path: $DMG_PATH"

        # 创建DMG文件
        hdiutil create -volname 'Pictorial' -srcfolder "$DMG_DIR" -ov -format UDZO "$DMG_PATH"

        # 提交到公证服务
        xcrun notarytool submit "$DMG_PATH" --keychain-profile "pictorial" --wait --no-s3-acceleration

        # 注入公证信息
        xcrun stapler staple "$DMG_PATH"

        # 删除临时目录
        rm -rf "$DMG_DIR"

        # 检查DMG是否创建成功
        if [ -f "$DMG_PATH" ]; then
            # 将/build/macos/Build/Products/Release/目录下的文件复制到dist目录下
            cp "$DMG_PATH" dist/
        else
            echo "Failed to create DMG"
            exit 1
        fi

        # 删除构建产物
        # rm -rf "$OUTPUT_DIR"

        # echo "Build artifact 1" > dist/artifact1.txt  # 模拟构建产物
        # echo "Build artifact 2" > dist/artifact2.txt  # 模拟构建产物

    - name: Install coscli
      run: |
        curl -sSL https://github.com/tencentyun/coscli/releases/download/v1.0.4/coscli-v1.0.4-darwin-arm64 -o coscli
        sudo mv coscli /usr/local/bin/coscli
        chmod +x /usr/local/bin/coscli

    - name: Configure coscli
      run: |
        coscli config add \
          --bucket ${{ secrets.BUC_NAME }} \
          --region ap-beijing \
          --alias my-bucket
        coscli config set \
          --secret_id ${{ secrets.SEC_ID }} \
          --secret_key ${{ secrets.SEC_K }} 

    - name: Upload to COS
      run: |
        cd bitbucket-repo
        ls dist
        coscli cp "dist/" "cos://my-bucket/" -r --progress

    - name: Send success notification to WeChat
      if: success()
      run: |
        curl -X POST "${{ secrets.WECHAT_HOOK }}" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建成功: ${{ secrets.COS_HOST }}/${{ env.DMG_NAME }}"
              }
            }'

    - name: Send failure notification to WeChat
      if: failure()
      run: |
        curl -X POST "${{ secrets.WECHAT_HOOK }}" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建失败"
              }
            }'
